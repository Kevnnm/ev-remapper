#!/usr/bin/python3

from argparse import ArgumentParser
import os
import subprocess
import sys

from evremapper.logger import logger, add_loghandler, logger_verbosity
from evremapper.configs.global_config import global_config
from evremapper.user import HOME

AUTOLOAD = 'autoload'
STOP_ALL = 'stop-all'
AUTOLOAD_SINGLE = 'autoload-single'
INJECT_DEVICE = 'inject'
STOP_INJECT_DEVICE = 'stop-injecting'

START_DAEMON = 'start-daemon'

DAEMON_COMMANDS = set([AUTOLOAD, AUTOLOAD_SINGLE, STOP_ALL, INJECT_DEVICE, STOP_INJECT_DEVICE])
CLI_COMMANDS = set(['configure'])
INTERNALS = set([START_DAEMON])

LOG_FILE = (
    "/var/log/ev-remapper-control.log"
    if os.access("/var/log", os.W_OK)
    else f"{HOME}/.log/ev-remapper-control.log"
)

usage = ""


def set_usage(usage_str):
    global usage
    usage = usage_str


def cli(options):
    raise NotImplementedError


def internals(options):
    # TODO: fix this in daemon.py
    if options.command == START_DAEMON:
        cmd = 'ev-remapper-service'
    else:
        return

    # daemonize
    cmd = f'{cmd} &'
    os.system(cmd)


def communicate_daemon(daemon, options):
    from evremapper.devices import DevGroups
    from evremapper.user import USER
    global usage

    def require_device():
        if options.device is None:
            logger.error('command "%s" requires positional argument [device], exiting', options.command)
            print("error: command requires positional argument [device]")
            print(usage)
            exit(1)

        DevGroups.refresh()

        if options.device.startswith("/dev"):
            group = DevGroups.find(path=options.device)
        else:
            group = DevGroups.find(key=options.device)

        print(group)

        if group is None:
            logger.error('device not found "%s"', options.device)
            print(f'error: device not found "{options.device}"')
            exit(1)

        return group

    if daemon is None:
        # should never happen
        logger.error('Daemon missing')
        exit(1)

    # TODO: check if options.config_dir is set, if so use that instead
    if USER != "root":
        # We need to have this because udev calls this file as root so it
        # will change the users current config dir to a directory in the root
        # home folder
        config_dir = os.path.dirname(global_config.path)
        daemon.set_config_dir(config_dir)

    if options.command == AUTOLOAD:
        daemon.autoload(timeout=10)
    elif options.command == AUTOLOAD_SINGLE:
        group = require_device()
        daemon.autoload_single(group.key)
    elif options.command == STOP_ALL:
        daemon.stop_all()
    elif options.command == INJECT_DEVICE:
        group = require_device()

        if options.config_selection is None:
            daemon.autoload_single(group.key)
        else:
            daemon.inject_device(group.key, options.config_selection)
    elif options.command == STOP_INJECT_DEVICE:
        group = require_device()

        daemon.stop_inject_device(group.key)


def _num_logged_in_users():
    """Check how many users are logged in."""
    who = subprocess.run(['who'], stdout=subprocess.PIPE).stdout.decode()
    return len([user for user in who.split('\n') if user.strip() != ""])


def _systemd_finished():
    """Check if systemd finished booting."""
    try:
        systemd_analyze = subprocess.run(['systemd-analyze'], stdout=subprocess.PIPE)
    except FileNotFoundError:
        # probably not systemd, lets assume true to not block ev-remapper for good
        # on certain installations
        return True

    if 'finished' in systemd_analyze.stdout.decode():
        # it writes into stderr otherwise or something
        return True

    return False


def boot_finished():
    """Check if booting is completed."""
    # Get as much information as needed to really safely determine if booting up is complete.
    # - `who` returns an empty list on some system for security purposes
    # - something might be broken and might make systemd_analyze fail:
    #       Bootup is not yet finished (org.freedesktop.systemd1.Manager.FinishTimestampMonotonic=0).
    #       Please try again later.
    #       Hint: Use 'systemctl list-jobs' to see active jobs
    if _systemd_finished():
        logger.debug('Booting finished')
        return True

    if _num_logged_in_users() > 0:
        logger.debug('User(s) logged in')
        return True

    return False


def main(options):
    # TODO: Add debug option to ev-remapper-service and control
    # if options.debug:
    logger_verbosity(True)

    add_loghandler(LOG_FILE)

    logger.debug('called for "%s"', sys.argv)

    from evremapper.user import USER
    boot_finished_ = boot_finished()
    is_root = USER == "root"
    is_autoload = options.command == "autoload" or options.command == "autoload_single"
    config_dir_set = options.config_dir is not None

    logger.debug('user is "%s"', USER)

    if is_autoload and not boot_finished_ and is_root and not config_dir_set:
        logger.warning('Skipping autoload command without a logged in user')
        return

    if options.command in DAEMON_COMMANDS:
        from evremapper.daemon import Daemon

        daemon = Daemon.connect(fallback=False)
        communicate_daemon(daemon, options)
    elif options.command in CLI_COMMANDS:
        cli(options)
    elif options.command in INTERNALS:
        internals(options)


if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument('command',
                        choices=list(DAEMON_COMMANDS) + list(CLI_COMMANDS) + list(INTERNALS),
                        help="the command to be run, choose from %(choices)s",
                        metavar='command')
    parser.add_argument('device',
                        nargs="?",
                        help="device to start/stop injecting",
                        default=None)
    parser.add_argument('config_selection',
                        nargs="?",
                        help="name of device config to select")
    parser.add_argument('--config-dir', action='store', dest='config_dir',
                        help=(
                            'path to the config directory containing config.json '
                            'and the presets folder. '
                            'defaults to ~/.config/ev-remapper/'
                        ),
                        default=None, metavar='CONFIG_DIR',)

    set_usage(parser.format_usage())
    options = parser.parse_args()

    main(options)
